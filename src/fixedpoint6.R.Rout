> rm(list=ls())
> my.seed=1
> set.seed(my.seed)
> 
> library(ergm.tapered)
Loading required package: ergm
Loading required package: network

‘network’ 1.18.0 (2022-10-05), part of the Statnet Project
* ‘news(package="network")’ for changes since last version
* ‘citation("network")’ for citation information
* ‘https://statnet.org’ for help, support, and other information


‘ergm’ 4.3-6983 (2022-08-20), part of the Statnet Project
* ‘news(package="ergm")’ for changes since last version
* ‘citation("ergm")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

‘ergm’ 4 is a major update that introduces some backwards-incompatible
changes. Please type ‘news(package="ergm")’ for a list of major
changes.

> library(doRNG)
Loading required package: foreach
Loading required package: rngtools
> library(mfergm)
> library(optimx)     # mfergm likelihood
> library(R.utils)    # set time on ergm
Loading required package: R.oo
Loading required package: R.methodsS3
R.methodsS3 v1.8.2 (2022-06-13 22:00:14 UTC) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.25.0 (2022-06-12 02:20:02 UTC) successfully loaded. See ?R.oo for help.

Attaching package: ‘R.oo’

The following object is masked from ‘package:R.methodsS3’:

    throw

The following objects are masked from ‘package:methods’:

    getClasses, getMethods

The following objects are masked from ‘package:base’:

    attach, detach, load, save

R.utils v2.12.0 (2022-06-28 03:20:05 UTC) successfully loaded. See ?R.utils for help.

Attaching package: ‘R.utils’

The following object is masked from ‘package:utils’:

    timestamp

The following objects are masked from ‘package:base’:

    cat, commandArgs, getOption, isOpen, nullfile, parse, warnings

> library(doParallel) # parallel loops using 'foreach'
Loading required package: iterators
Loading required package: parallel
> 
> #####################################################################
> #                                                                   #
> #     Create High Transitivity ERGM Params (using ERGM fitting)     #
> #                                                                   #
> #####################################################################
> 
> nsims       =  1000                              # number of networks simulated
> n           =  100                               # number of nodes
> theta       =  c(-2,1,1,1) * c(2,2,1/n,1/n)      # true parameters for model 1
> theta <- c(-1.842, 1.347, -0.154, 0.853) #perfect
> theta <- c(-2.162, 1.457, -0.1314, 0.736)
> theta <- c(-2.0967979, 1.4274966, -0.1387846, 0.7541693)
> theta <- c(-2.1088249, 1.4353562, -0.1380418, 0.7504813)
> theta <- c(-2.0766314, 1.4381472, -0.1398167, 0.7496554)
> theta <- c(-1.9746393, 1.4805697, -0.1417278, 0.7249104)
> theta <- c(-2.0028533, 1.5853063, -0.1655770, 0.7367452)
> theta <- c(-1.8239798, 1.4320427, -0.1626898, 0.7308445)
> theta <- c(-1.8793576, 1.4214192, -0.1594352, 0.7495866)
> mv_1 <- c(394, 342, 3000, 180)
> mv_1 <- c(358.16, 351.24, 1.0*2643.56, 1.0*123.69)
> mv_1 <- c(400.31, 349.88, 3254.42, 1.4*126.28)
> mv_1 <- c(393.0512, 341.0188, 3092.0576, 117.4754)
> mv_1 <- c(0.95*393.0512, 341.0188, 3092.0576, 1.5*117.4754)
> ##################
> #                #
> #     Set-up     #
> #                #
> ##################
> 
> sim <- initialize.network(theta, n, directed = FALSE)
> x <- rbinom(n, 1, 0.5) # attributes
> set.vertex.attribute(sim, # the name of the network object
+                      "x", # the name we want to reference the variable by in that object
+                      x # the value we are giving that variable
+ ) 
> 
> load(file="sim2.RData")
> formula <- sim ~ edges + nodematch("x") + kstar(2) + triangles
> names(mv_1) <- names(summary(formula))
> names(theta) <- names(mv_1)
> 
> if(F){
+ fit <- ergm.tapered(formula, eval.loglik=FALSE, target.stats=mv_1,
+                     control=control.ergm.tapered(parallel=4,init=theta, MCMLE.MCMC.precision=0.001,MCMC.burnin=1000000, MCMC.interval=10000) )
+ sim <- fit$newnetwork
+ save(sim, file="sim2.RData")
+ }else{
+ load(file="sim2.RData")
+ theta <- c(-4.04102369, 1.92622055, -0.01309495, 0.40731208)
+ sim <- simulate_ergm.tapered(sim ~ edges+nodematch("x")+ kstar(2) + triangles,
+                tapering.centers=mv_1, tau=0.25/mv_1,
+                control=control.simulate.formula(MCMC.burnin=1000000, MCMC.interval=10000),
+                coef = theta)
+ }
> cbind(theta,mv_1,summary(sim ~ edges+nodematch("x")+ kstar(2) + triangles))
                  theta      mv_1     
edges       -4.04102369  373.3986  389
nodematch.x  1.92622055  341.0188  340
kstar2      -0.01309495 3092.0576 3117
triangle     0.40731208  176.2131  159
> pdf("sim.pdf")
> plot(sim,vertex.col=c(1,3)[(sim %v% "x")+1])
> dev.off()
null device 
          1 
> 
> registerDoParallel(10)
> fn <- function(theta,sim,mv_1,nsims){
+   a = foreach(i = 1:10, .combine = rbind) %dorng% {
+   simulate_ergm.tapered(sim ~ edges+nodematch("x")+ kstar(2) + triangles,
+                tapering.centers=mv_1, tau=0.25/mv_1,
+                nsim = nsims,
+                control=control.simulate.formula(MCMC.burnin=1000000, MCMC.interval=100000),
+                coef = theta,         
+                output = "stats"
+   )
+   }
+ o <- colMeans(a)-mv_1
+ o2 <- c(3,3,0.5,1)*o*o
+ o2 <- o*o
+ o2 <- c(1,1,1,3)*o*o
+ message(sprintf("val = %f %f %f %f: %f", o[1],o[2],o[3],o[4], sqrt(sum(o2))))
+ sqrt(sum(o2))
+ }
> theta
[1] -4.04102369  1.92622055 -0.01309495  0.40731208
> fn(theta,sim,mv_1,nsims)
val = 9.359060 2.519600 -8.440400 -0.589700: 12.892788
[1] 12.89279
> fit <- optim(par=theta, fn=fn, sim=sim, mv_1=mv_1, nsims=nsims, control=list(maxit=50,abstol=2,trace=6))
  Nelder-Mead direct search function minimizer
val = 9.394960 2.623100 -7.166300 -0.410900: 12.124698
function value for initial parameters = 12.124698
  Scaled convergence tolerance is 1.80672e-07
Stepsize computed as 0.404102
val = 25.008860 15.235500 116.086200 -1.293600: 119.743850
val = 22.886460 26.352900 94.749700 8.349300: 102.004429
val = 124.902460 84.182000 2210.373700 114.843600: 2224.411447
val = -4.321540 -1.233900 133.390200 96.159000: 213.431028
BUILD              5 2224.411447 12.124698
val = -110.694040 -96.095300 -1766.562400 -105.137200: 1781.962874
val = -43.518740 -35.403300 -901.109000 -45.066200: 906.221602
LO-REDUCTION       7 906.221602 12.124698
val = 71.694760 53.368300 1123.725600 71.238400: 1134.007172
val = -12.571440 -8.910800 -421.701500 -13.599000: 422.639796
HI-REDUCTION       9 422.639796 12.124698
val = 44.552660 35.060100 595.888600 45.224900: 603.683070
val = 2.354560 3.093300 -171.565600 1.786800: 171.637541
HI-REDUCTION      11 213.431028 12.124698
val = 16.491160 9.280300 -95.284500 -43.270800: 122.695985
val = 16.509560 11.176000 -47.115700 -22.748100: 64.573879
LO-REDUCTION      13 171.637541 12.124698
val = 34.579560 24.470300 253.108000 -10.420300: 257.262413
val = 10.693660 9.023600 -68.405300 -1.770700: 69.888990
HI-REDUCTION      15 119.743850 12.124698
val = 5.204360 8.887600 -132.894900 -9.372000: 134.278190
val = 20.132860 14.190400 54.157800 -2.831900: 59.697787
HI-REDUCTION      17 102.004429 12.124698
val = 6.616460 -9.013300 -130.046300 -24.408100: 137.201761
val = 18.675860 18.096900 36.933800 0.195800: 45.171962
HI-REDUCTION      19 69.888990 12.124698
val = 22.345760 14.641000 85.653700 -12.347500: 92.236817
val = 13.601860 10.384700 -31.303000 -4.491400: 36.513674
HI-REDUCTION      21 64.573879 12.124698
val = 11.727260 9.375000 78.532300 25.389900: 91.250657
val = 16.221360 11.487400 -19.085300 -13.045300: 35.635391
HI-REDUCTION      23 59.697787 12.124698
val = 9.077860 7.426000 -65.508000 -6.797600: 67.583084
val = 17.606360 12.653800 25.284100 -3.821600: 33.958830
HI-REDUCTION      25 45.171962 12.124698
val = 10.162160 0.275700 -54.349300 -12.187600: 59.184497
val = 16.637160 13.925300 14.252900 -2.993800: 26.471546
HI-REDUCTION      27 36.513674 12.124698
val = 16.708060 10.209100 36.556900 -6.444000: 42.946098
val = 14.370460 10.340700 -14.624700 -5.190200: 24.660425
HI-REDUCTION      29 35.635391 12.124698
val = 12.020860 7.670700 27.644200 8.273300: 34.247408
val = 13.461560 8.966500 14.875600 2.246300: 22.316648
LO-REDUCTION      31 33.958830 12.124698
val = 9.193860 5.161400 -20.869800 0.897100: 23.433524
val = 11.434060 7.204900 -10.454100 -0.436300: 17.102853
LO-REDUCTION      33 26.471546 12.124698
val = 7.206160 0.098700 -23.077700 1.617900: 24.338684
val = 9.896860 3.960500 -13.280300 0.123600: 17.030725
LO-REDUCTION      35 24.660425 12.124698
val = 6.351960 -0.257000 8.250700 7.755800: 16.998376
val = 8.831160 2.704200 0.090500 3.290000: 10.852768
LO-REDUCTION      37 22.316648 10.852768
val = 6.174960 -0.941100 -29.329300 -0.682700: 30.010363
val = 11.743460 6.653500 3.517600 1.471900: 14.179242
HI-REDUCTION      39 17.102853 10.852768
val = 8.257560 0.593000 1.148600 2.804900: 9.667503
val = 6.258360 -3.461500 7.027700 5.058800: 13.315855
REFLECTION        41 17.030725 9.667503
val = 9.302860 2.378700 13.002200 3.421600: 17.215710
val = 9.770460 3.577900 -6.704800 0.920800: 12.480433
HI-REDUCTION      43 14.179242 9.667503
val = 6.060560 -2.267400 -9.588800 2.241800: 12.202196
val = 7.619760 0.151000 -5.731800 2.104300: 10.208884
LO-REDUCTION      45 12.480433 9.667503
val = 7.283560 -0.633700 1.183400 3.186800: 9.236847
val = 5.783260 -2.782700 5.390400 4.645200: 11.618071
REFLECTION        47 12.124698 9.236847
val = 6.466860 -1.309000 7.424500 6.708600: 15.286363
val = 8.631660 1.472700 -4.741200 0.969000: 10.098032
HI-REDUCTION      49 10.852768 9.236847
val = 6.919660 -2.168000 -6.312800 0.985400: 9.764548
val = 7.476360 -0.854100 -3.781900 1.601200: 8.866777
Exiting from Nelder Mead minimizer
    51 function evaluations used
> fit
$par
[1] -4.071704971  1.876736641 -0.008247027  0.423032307

$value
[1] 9.236847

$counts
function gradient 
      51       NA 

$convergence
[1] 1

$message
NULL

> theta <- fit$par
> names(theta) <- names(mv_1)
> sim <- simulate_ergm.tapered(sim ~ edges+nodematch("x")+ kstar(2) + triangles,
+                tapering.centers=mv_1, tau=0.25/mv_1,
+                control=control.simulate.formula(MCMC.burnin=1000000, MCMC.interval=10000),
+                coef = theta)
> cbind(theta,mv_1,summary(sim ~ edges+nodematch("x")+ kstar(2) + triangles))
                   theta      mv_1     
edges       -4.071704971  373.3986  371
nodematch.x  1.876736641  341.0188  323
kstar2      -0.008247027 3092.0576 3025
triangle     0.423032307  176.2131  172
> save(sim, theta, file="sim6.RData")
> 
> proc.time()
     user    system   elapsed 
25044.617   228.980  5223.749 
