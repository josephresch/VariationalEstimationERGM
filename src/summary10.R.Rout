> rm(list=ls())
> my.seed=1
> set.seed(my.seed)
> 
> pdf("model9_sim1.tapered.pdf")
> 
> library(ergm.tapered)
Loading required package: ergm
Loading required package: network

‘network’ 1.18.0 (2022-10-05), part of the Statnet Project
* ‘news(package="network")’ for changes since last version
* ‘citation("network")’ for citation information
* ‘https://statnet.org’ for help, support, and other information


‘ergm’ 4.3-6983 (2022-08-20), part of the Statnet Project
* ‘news(package="ergm")’ for changes since last version
* ‘citation("ergm")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

‘ergm’ 4 is a major update that introduces some backwards-incompatible
changes. Please type ‘news(package="ergm")’ for a list of major
changes.

> library(doRNG)
Loading required package: foreach
Loading required package: rngtools
> library(mfergm)
> library(optimx)     # mfergm likelihood
> library(R.utils)    # set time on ergm
Loading required package: R.oo
Loading required package: R.methodsS3
R.methodsS3 v1.8.2 (2022-06-13 22:00:14 UTC) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.25.0 (2022-06-12 02:20:02 UTC) successfully loaded. See ?R.oo for help.

Attaching package: ‘R.oo’

The following object is masked from ‘package:R.methodsS3’:

    throw

The following objects are masked from ‘package:methods’:

    getClasses, getMethods

The following objects are masked from ‘package:base’:

    attach, detach, load, save

R.utils v2.12.0 (2022-06-28 03:20:05 UTC) successfully loaded. See ?R.utils for help.

Attaching package: ‘R.utils’

The following object is masked from ‘package:utils’:

    timestamp

The following objects are masked from ‘package:base’:

    cat, commandArgs, getOption, isOpen, nullfile, parse, warnings

> library(doParallel) # parallel loops using 'foreach'
Loading required package: iterators
Loading required package: parallel
> 
> 
> if(T){
+ load("mfergm_params10_n1000_1.RData")
+ v1 <- mfergm_estim
+ v2 <- ergm_sim_estim_tapered
+ v3 <- init_params
+ v4 <- degen_mfergm
+ v5 <- degen_tapered
+ v6 <- mf_mv_est
+ v7 <- ergm_mv_est_tapered
+ v8 <- MPLE_mv_est
+ v9 <- mv_s/5
+ 
+ load("mfergm_params10_n1000_2.RData")
+ v1 <- rbind(v1,mfergm_estim)
+ v2 <- rbind(v2,ergm_sim_estim_tapered)
+ v3 <- rbind(v3,init_params)
+ v4 <- c(v4,degen_mfergm+200)
+ v5 <- c(v5,degen_tapered+200)
+ v6 <- rbind(v6,mf_mv_est)
+ v7 <- rbind(v7,ergm_mv_est_tapered)
+ v8 <- rbind(v8,MPLE_mv_est)
+ v9 <- v9 + mv_s/5
+ 
+ load("mfergm_params10_n1000_3.RData")
+ v1 <- rbind(v1,mfergm_estim)
+ v2 <- rbind(v2,ergm_sim_estim_tapered)
+ v3 <- rbind(v3,init_params)
+ v4 <- c(v4,degen_mfergm+2*200)
+ v5 <- c(v5,degen_tapered+2*200)
+ v6 <- rbind(v6,mf_mv_est)
+ v7 <- rbind(v7,ergm_mv_est_tapered)
+ v8 <- rbind(v8,MPLE_mv_est)
+ v9 <- v9 + mv_s/5
+ 
+ load("mfergm_params10_n1000_4.RData")
+ v1 <- rbind(v1,mfergm_estim)
+ v2 <- rbind(v2,ergm_sim_estim_tapered)
+ v3 <- rbind(v3,init_params)
+ v4 <- c(v4,degen_mfergm+3*200)
+ v5 <- c(v5,degen_tapered+3*200)
+ v6 <- rbind(v6,mf_mv_est)
+ v7 <- rbind(v7,ergm_mv_est_tapered)
+ v8 <- rbind(v8,MPLE_mv_est)
+ v9 <- v9 + mv_s/5
+ 
+ load("mfergm_params10_n1000_5.RData")
+ v1 <- rbind(v1,mfergm_estim)
+ v2 <- rbind(v2,ergm_sim_estim_tapered)
+ v3 <- rbind(v3,init_params)
+ v4 <- c(v4,degen_mfergm+4*200)
+ v5 <- c(v5,degen_tapered+4*200)
+ v6 <- rbind(v6,mf_mv_est)
+ v7 <- rbind(v7,ergm_mv_est_tapered)
+ v8 <- rbind(v8,MPLE_mv_est)
+ v9 <- v9 + mv_s/5
+ 
+ mfergm_estim <- v1
+ ergm_sim_estim_tapered <- v2
+ init_params <- v3
+ degen_mfergm <- v4
+ degen_tapered <- v5
+ mf_mv_est <- v6
+ ergm_mv_est_tapered <- v7
+ MPLE_mv_est <- v8
+ }else{
+ load("mfergm_params10_n1000.RData")
+ }
> 
> # First natural params
> complete_mf_results = mfergm_estim[complete.cases(mfergm_estim),]
> complete_tapered_results = ergm_sim_estim_tapered[complete.cases(ergm_sim_estim_tapered),]
> complete_MPLE_results = init_params[complete.cases(init_params),]
> 
> bdrmse <- function(comp, theta, degen){
+  outliers1 = union(outliers((comp[,1] - theta[1])^2), degen)
+  outliers2 = union(outliers((comp[,2] - theta[2])^2), degen)
+  outliers3 = union(outliers((comp[,3] - theta[3])^2), degen)
+  outliers4 = union(outliers((comp[,4] - theta[4])^2), degen)
+  rmse1 <- ((comp[,1] - theta[1])^2)
+  rmse1[outliers1] <- max(rmse1[-outliers1])
+  rmse2 <- ((comp[,2] - theta[2])^2)
+  rmse2[outliers2] <- max(rmse2[-outliers2])
+  rmse3 <- ((comp[,3] - theta[3])^2)
+  rmse3[outliers3] <- max(rmse3[-outliers3])
+  rmse4 <- ((comp[,4] - theta[4])^2)
+  rmse4[outliers4] <- max(rmse4[-outliers4])
+  c(sqrt(mean(rmse1)), sqrt(mean(rmse2)), sqrt(mean(rmse3)), sqrt(mean(rmse4)) ) 
+ }
> bdmad <- function(comp, theta, degen){
+  outliers1 = union(outliers(abs(comp[,1] - theta[1])),degen)
+  outliers2 = union(outliers(abs(comp[,2] - theta[2])),degen)
+  outliers3 = union(outliers(abs(comp[,3] - theta[3])),degen)
+  outliers4 = union(outliers(abs(comp[,4] - theta[4])),degen)
+  mad1 <- (abs(comp[,1] - theta[1]))
+  mad1[outliers1] <- max(mad1[-outliers1])
+  mad2 <- (abs(comp[,2] - theta[2]))
+  mad2[outliers2] <- max(mad2[-outliers2])
+  mad3 <- (abs(comp[,3] - theta[3]))
+  mad3[outliers3] <- max(mad3[-outliers3])
+  mad4 <- (abs(comp[,4] - theta[4]))
+  mad4[outliers4] <- max(mad4[-outliers4])
+  c((mean(mad1)), (mean(mad2)), (mean(mad3)), (mean(mad4)) )
+ }
> 
> # Degeneracy
> length(intersect(which(is.na(mfergm_estim[,1])), which(is.na(ergm_sim_estim_tapered[,1]))))
[1] 0
> 
> # RMSE
> 
> MPLE_rmse <- bdrmse(complete_MPLE_results, theta,degen=NULL)
> mf_rmse <- bdrmse(complete_mf_results, theta, degen_mfergm)
> tapered_rmse <- bdrmse(complete_tapered_results, theta, degen_tapered)
> 
> # MAD
> MPLE_mad <- bdmad(complete_MPLE_results, theta,degen=NULL)
> mf_mad <- bdmad(complete_mf_results, theta, degen_mfergm)
> tapered_mad <- bdmad(complete_tapered_results, theta, degen_tapered)
> 
> RMSE_natural_parameter <- cbind(round(tapered_rmse, 3), round(MPLE_rmse, 3), round(mf_rmse, 3))
> rownames(RMSE_natural_parameter) <- names(mv_s)
> colnames(RMSE_natural_parameter) <- c("MCMC-MLE","MPLE", "MFVLE")
> # These are the RMSE of natural parameter estimates
> RMSE_natural_parameter
            MCMC-MLE  MPLE MFVLE
edges          0.350 0.357 2.952
nodematch.x    0.161 0.161 3.767
kstar2         0.021 0.022 0.051
triangle       0.104 0.105 0.127
> 
> MAD_natural_parameter <- cbind(round(tapered_mad, 3), round(MPLE_mad, 3), round(mf_mad, 3))
> rownames(MAD_natural_parameter) <- names(mv_s)
> colnames(MAD_natural_parameter) <- c("MCMC-MLE","MPLE", "MFVLE")
> # These are the MAD of natural parameter estimates
> MAD_natural_parameter
            MCMC-MLE  MPLE MFVLE
edges          0.300 0.307 2.482
nodematch.x    0.138 0.137 3.247
kstar2         0.018 0.019 0.045
triangle       0.090 0.090 0.113
> 
> 
> outliers1 = outliers((complete_tapered_results[,1] - theta[1])^2)
> outliers2 = outliers((complete_tapered_results[,2] - theta[2])^2)
> outliers3 = outliers((complete_tapered_results[,3] - theta[3])^2)
> outliers4 = outliers((complete_tapered_results[,4] - theta[4])^2)
> plot((complete_mf_results[,1] - theta[1])^2, pch = 19, ylab = "", xlab = "Simulated Networks")
> plot((complete_mf_results[,2] - theta[2])^2, pch = 19, ylab = "", xlab = "Simulated Networks")
> plot((complete_mf_results[,3] - theta[3])^2, pch = 19, ylab = "", xlab = "Simulated Networks")
> plot((complete_mf_results[,4] - theta[4])^2, pch = 19, ylab = "", xlab = "Simulated Networks")
> plot(((complete_mf_results[,1] - theta[1])^2)[-outliers1], pch = 19, ylab = "", xlab = "Simulated Networks")
> plot(((complete_mf_results[,2] - theta[2])^2)[-outliers2], pch = 19, ylab = "", xlab = "Simulated Networks")
> plot(((complete_mf_results[,3] - theta[3])^2)[-outliers3], pch = 19, ylab = "", xlab = "Simulated Networks")
> plot(((complete_mf_results[,4] - theta[4])^2)[-outliers4], pch = 19, ylab = "", xlab = "Simulated Networks")
> 
> 
> outliers1 = head(order((complete_mf_results[,1] - theta[1])^2, decreasing = T), n = 100)
> outliers2 = head(order((complete_mf_results[,2] - theta[2])^2, decreasing = T), n = 100)
> outliers3 = head(order((complete_mf_results[,3] - theta[3])^2, decreasing = T), n = 100)
> outliers4 = head(order((complete_mf_results[,4] - theta[4])^2, decreasing = T), n = 100)
> outliers_all = intersect(intersect(intersect(outliers1, outliers2), outliers3), outliers4)
> 
> 
> plot(density(complete_mf_results[,1]), main = "")
> plot(density(complete_mf_results[,2]), main = "")
> plot(density(complete_mf_results[,3]), main = "")
> plot(density(complete_mf_results[,4]), main = "")
> 
> 
> # Now the mean values
> complete_mf_results = mf_mv_est[complete.cases(mf_mv_est),]
> complete_tapered_results = ergm_mv_est_tapered[complete.cases(ergm_mv_est_tapered),]
> complete_MPLE_results = MPLE_mv_est[complete.cases(MPLE_mv_est),]
> 
> 
> # Degeneracy
> length(intersect(which(is.na(mf_mv_est[,1])), which(is.na(ergm_mv_est_tapered[,1]))))
[1] 0
> 
> # MFERGM RMSE
> 
> outliers1 = outliers((complete_tapered_results[,1] - mv_s[1])^2)
> outliers2 = outliers((complete_tapered_results[,2] - mv_s[2])^2)
> outliers3 = outliers((complete_tapered_results[,3] - mv_s[3])^2)
> outliers4 = outliers((complete_tapered_results[,4] - mv_s[4])^2)
> plot((complete_mf_results[,1] - mv_s[1])^2, pch = 19, ylab = "", xlab = "Simulated Networks")
> plot((complete_mf_results[,2] - mv_s[2])^2, pch = 19, ylab = "", xlab = "Simulated Networks")
> plot((complete_mf_results[,3] - mv_s[3])^2, pch = 19, ylab = "", xlab = "Simulated Networks")
> plot((complete_mf_results[,4] - mv_s[4])^2, pch = 19, ylab = "", xlab = "Simulated Networks")
> plot(((complete_mf_results[,1] - mv_s[1])^2)[-outliers1], pch = 19, ylab = "", xlab = "Simulated Networks")
> plot(((complete_mf_results[,2] - mv_s[2])^2)[-outliers2], pch = 19, ylab = "", xlab = "Simulated Networks")
> plot(((complete_mf_results[,3] - mv_s[3])^2)[-outliers3], pch = 19, ylab = "", xlab = "Simulated Networks")
> plot(((complete_mf_results[,4] - mv_s[4])^2)[-outliers4], pch = 19, ylab = "", xlab = "Simulated Networks")
> 
> plot(density(complete_mf_results[,1]), main = "")
> plot(density(complete_mf_results[,2]), main = "")
> plot(density(complete_mf_results[,3]), main = "")
> plot(density(complete_mf_results[,4]), main = "")
> 
> # RMSE
> 
> MPLE_rmse <- bdrmse(complete_MPLE_results, mv_s, degen=NULL)
> mf_rmse <- bdrmse(complete_mf_results, mv_s, degen_mfergm)
> tapered_rmse <- bdrmse(complete_tapered_results, mv_s, degen_tapered)
> 
> # MAD
> MPLE_mad <- bdmad(complete_MPLE_results, mv_s, degen=NULL)
> mf_mad <- bdmad(complete_mf_results, mv_s, degen_mfergm)
> tapered_mad <- bdmad(complete_tapered_results, mv_s, degen_tapered)
> 
> RMSE_mean_value_parameter <- cbind(round(tapered_rmse, 3), round(MPLE_rmse, 3), round(mf_rmse, 3))
> rownames(RMSE_mean_value_parameter) <- names(mv_s)
> colnames(RMSE_mean_value_parameter) <- c("MCMC-MLE","MPLE", "MFVLE")
> # These are the RMSE of mean-value parameter estimates
> RMSE_mean_value_parameter
            MCMC-MLE    MPLE     MFVLE
edges         26.193  26.664   417.596
nodematch.x   24.401  24.425   298.636
kstar2       419.482 425.266 10400.556
triangle      27.557  27.920   540.666
> 
> MAD_mean_value_parameter <- cbind(round(tapered_mad, 3), round(MPLE_mad, 3), round(mf_mad, 3))
> rownames(MAD_mean_value_parameter) <- names(mv_s)
> colnames(MAD_mean_value_parameter) <- c("MCMC-MLE","MPLE", "MFVLE")
> # These are the MAD of mean-value parameter estimates
> MAD_mean_value_parameter
            MCMC-MLE    MPLE    MFVLE
edges         22.359  22.523  344.108
nodematch.x   20.767  20.796  267.496
kstar2       356.471 360.225 8618.541
triangle      23.630  23.881  450.076
> 
> plot(mfergm_estim[,4],ergm_sim_estim_tapered[,4])
> 
> mean_est <- cbind(theta, ergm_result_tapered, MPLE_result, mfergm_result)
> rownames(mean_est) <- names(mv_s)
> colnames(mean_est) <- c("true", "MCMC-MLE","MPLE","MFVLE")
> mean_est
             true     MCMC-MLE        MPLE       MFVLE
edges       -4.00 -3.936675188 -3.93092084 -12.9412477
nodematch.x  2.00  2.023667475  2.02247992 -15.6298101
kstar2       0.01  0.005178415  0.00477932  -0.2418583
triangle     0.01 -0.003978789 -0.00172309  -0.2538880
> 
> mean_mv_est <- cbind(round(colMeans(g_sim_stats), 2), round(ergm_mv_tapered,2), round(MPLE_mv,2), round(mfergm_mv, 2))
> rownames(mean_mv_est) <- names(mv_s)
> colnames(mean_mv_est) <- c("true", "MCMC-MLE","MPLE", "MFVLE")
> mean_mv_est
               true MCMC-MLE    MPLE    MFVLE
edges        393.50   395.47  401.70   780.47
nodematch.x  341.46   343.46  346.64   537.17
kstar2      3098.54  3132.94 3707.74 22532.38
triangle     118.06   119.74  288.86  3652.17
> 
> # Summary
> length(degen_tapered) / nsims
[1] 0.015
> length(degen_mfergm) / nsims
[1] 0.115
> mean_est
             true     MCMC-MLE        MPLE       MFVLE
edges       -4.00 -3.936675188 -3.93092084 -12.9412477
nodematch.x  2.00  2.023667475  2.02247992 -15.6298101
kstar2       0.01  0.005178415  0.00477932  -0.2418583
triangle     0.01 -0.003978789 -0.00172309  -0.2538880
> mean_mv_est
               true MCMC-MLE    MPLE    MFVLE
edges        393.50   395.47  401.70   780.47
nodematch.x  341.46   343.46  346.64   537.17
kstar2      3098.54  3132.94 3707.74 22532.38
triangle     118.06   119.74  288.86  3652.17
> # These are the RMSE of natural parameter estimates
> RMSE_natural_parameter
            MCMC-MLE  MPLE MFVLE
edges          0.350 0.357 2.952
nodematch.x    0.161 0.161 3.767
kstar2         0.021 0.022 0.051
triangle       0.104 0.105 0.127
> # These are the MAD of natural parameter estimates
> MAD_natural_parameter
            MCMC-MLE  MPLE MFVLE
edges          0.300 0.307 2.482
nodematch.x    0.138 0.137 3.247
kstar2         0.018 0.019 0.045
triangle       0.090 0.090 0.113
> # These are the RMSE of mean-value parameter estimates
> RMSE_mean_value_parameter
            MCMC-MLE    MPLE     MFVLE
edges         26.193  26.664   417.596
nodematch.x   24.401  24.425   298.636
kstar2       419.482 425.266 10400.556
triangle      27.557  27.920   540.666
> # These are the RMSE of mean-value parameter estimates
> MAD_mean_value_parameter
            MCMC-MLE    MPLE    MFVLE
edges         22.359  22.523  344.108
nodematch.x   20.767  20.796  267.496
kstar2       356.471 360.225 8618.541
triangle      23.630  23.881  450.076
> 
> rm(g.sim)
Warning message:
In rm(g.sim) : object 'g.sim' not found
> rm(ergm_sim_list_tapered)
> save.image("mfergm_params10_n1000.RData")
> 
> proc.time()
   user  system elapsed 
 34.311   0.908  47.080 
