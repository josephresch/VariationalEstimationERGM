> rm(list=ls())
> my.seed=1
> set.seed(my.seed)
> 
> library(ergm.tapered)
Loading required package: ergm
Loading required package: network

‘network’ 1.18.0 (2022-10-05), part of the Statnet Project
* ‘news(package="network")’ for changes since last version
* ‘citation("network")’ for citation information
* ‘https://statnet.org’ for help, support, and other information


‘ergm’ 4.3-6983 (2022-08-20), part of the Statnet Project
* ‘news(package="ergm")’ for changes since last version
* ‘citation("ergm")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

‘ergm’ 4 is a major update that introduces some backwards-incompatible
changes. Please type ‘news(package="ergm")’ for a list of major
changes.

> library(doRNG)
Loading required package: foreach
Loading required package: rngtools
> library(mfergm)
> library(optimx)     # mfergm likelihood
> library(R.utils)    # set time on ergm
Loading required package: R.oo
Loading required package: R.methodsS3
R.methodsS3 v1.8.2 (2022-06-13 22:00:14 UTC) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.25.0 (2022-06-12 02:20:02 UTC) successfully loaded. See ?R.oo for help.

Attaching package: ‘R.oo’

The following object is masked from ‘package:R.methodsS3’:

    throw

The following objects are masked from ‘package:methods’:

    getClasses, getMethods

The following objects are masked from ‘package:base’:

    attach, detach, load, save

R.utils v2.12.0 (2022-06-28 03:20:05 UTC) successfully loaded. See ?R.utils for help.

Attaching package: ‘R.utils’

The following object is masked from ‘package:utils’:

    timestamp

The following objects are masked from ‘package:base’:

    cat, commandArgs, getOption, isOpen, nullfile, parse, warnings

> library(doParallel) # parallel loops using 'foreach'
Loading required package: iterators
Loading required package: parallel
> 
> #####################################################################
> #                                                                   #
> #     Create High Transitivity ERGM Params (using ERGM fitting)     #
> #                                                                   #
> #####################################################################
> 
> nsims       =  1000                              # number of networks simulated
> n           =  100                               # number of nodes
> theta       =  c(-2,1,1,1) * c(2,2,1/n,1/n)      # true parameters for model 1
> theta <- c(-1.842, 1.347, -0.154, 0.853) #perfect
> theta <- c(-2.162, 1.457, -0.1314, 0.736)
> theta <- c(-2.0967979, 1.4274966, -0.1387846, 0.7541693)
> theta <- c(-2.1088249, 1.4353562, -0.1380418, 0.7504813)
> theta <- c(-2.0766314, 1.4381472, -0.1398167, 0.7496554)
> theta <- c(-1.9746393, 1.4805697, -0.1417278, 0.7249104)
> theta <- c(-2.0028533, 1.5853063, -0.1655770, 0.7367452)
> theta <- c(-1.8239798, 1.4320427, -0.1626898, 0.7308445)
> theta <- c(-1.8793576, 1.4214192, -0.1594352, 0.7495866)
> mv_1 <- c(394, 342, 3000, 180)
> mv_1 <- c(358.16, 351.24, 1.0*2643.56, 1.0*123.69)
> mv_1 <- c(400.31, 349.88, 3254.42, 1.4*126.28)
> mv_1 <- c(393.0512, 341.0188, 3092.0576, 117.4754)
> mv_1 <- c(0.97*393.0512, 341.0188, 3092.0576, 1.5*117.4754)
> ##################
> #                #
> #     Set-up     #
> #                #
> ##################
> 
> sim <- initialize.network(theta, n, directed = FALSE)
> x <- rbinom(n, 1, 0.5) # attributes
> set.vertex.attribute(sim, # the name of the network object
+                      "x", # the name we want to reference the variable by in that object
+                      x # the value we are giving that variable
+ ) 
> 
> load(file="sim2.RData")
> formula <- sim ~ edges + nodematch("x") + kstar(2) + triangles
> names(mv_1) <- names(summary(formula))
> names(theta) <- names(mv_1)
> 
> if(F){
+ fit <- ergm.tapered(formula, eval.loglik=FALSE, target.stats=mv_1,
+                     control=control.ergm.tapered(parallel=4,init=theta, MCMLE.MCMC.precision=0.001,MCMC.burnin=1000000, MCMC.interval=10000) )
+ sim <- fit$newnetwork
+ save(sim, file="sim2.RData")
+ }else{
+ load(file="sim2.RData")
+ theta <- c(-4.04102369, 1.92622055, -0.01309495, 0.40731208)
+ sim <- simulate_ergm.tapered(sim ~ edges+nodematch("x")+ kstar(2) + triangles,
+                tapering.centers=mv_1, tau=0.25/mv_1,
+                control=control.simulate.formula(MCMC.burnin=1000000, MCMC.interval=10000),
+                coef = theta)
+ }
> cbind(theta,mv_1,summary(sim ~ edges+nodematch("x")+ kstar(2) + triangles))
                  theta      mv_1     
edges       -4.04102369  381.2597  390
nodematch.x  1.92622055  341.0188  353
kstar2      -0.01309495 3092.0576 3148
triangle     0.40731208  176.2131  177
> pdf("sim.pdf")
> plot(sim,vertex.col=c(1,3)[(sim %v% "x")+1])
> dev.off()
null device 
          1 
> 
> registerDoParallel(10)
> fn <- function(theta,sim,mv_1,nsims){
+   a = foreach(i = 1:10, .combine = rbind) %dorng% {
+   simulate_ergm.tapered(sim ~ edges+nodematch("x")+ kstar(2) + triangles,
+                tapering.centers=mv_1, tau=0.25/mv_1,
+                nsim = nsims,
+                control=control.simulate.formula(MCMC.burnin=1000000, MCMC.interval=100000),
+                coef = theta,         
+                output = "stats"
+   )
+   }
+ o <- colMeans(a)-mv_1
+ o2 <- c(3,3,0.5,1)*o*o
+ o2 <- o*o
+ o2 <- c(1,1,1,3)*o*o
+ message(sprintf("val = %f %f %f %f: %f", o[1],o[2],o[3],o[4], sqrt(sum(o2))))
+ sqrt(sum(o2))
+ }
> theta
[1] -4.04102369  1.92622055 -0.01309495  0.40731208
> fn(theta,sim,mv_1,nsims)
val = 1.802436 2.845800 -6.784200 -0.643400: 7.656018
[1] 7.656018
> fit <- optim(par=theta, fn=fn, sim=sim, mv_1=mv_1, nsims=nsims, control=list(maxit=50,abstol=2,trace=6))
  Nelder-Mead direct search function minimizer
val = 1.878036 2.830800 -5.260200 -0.555300: 6.335237
function value for initial parameters = 6.335237
  Scaled convergence tolerance is 9.44024e-08
Stepsize computed as 0.404102
val = 17.449636 15.418200 119.069200 -1.123300: 121.340309
val = 15.335236 26.600700 97.010500 8.292100: 102.762253
val = 117.463636 84.313400 2211.917900 114.116500: 2225.433661
val = -11.589664 -0.713600 136.394400 95.666600: 214.929191
BUILD              5 2225.433661 6.335237
val = -118.165864 -95.720800 -1763.080400 -104.818700: 1778.915124
val = -51.099564 -35.102200 -898.334500 -44.987800: 903.836219
LO-REDUCTION       7 903.836219 6.335237
val = 64.423236 53.854500 1125.264500 70.782400: 1135.033612
val = -20.002064 -8.500800 -416.706200 -13.447500: 417.922133
HI-REDUCTION       9 417.922133 6.335237
val = 37.192636 35.361800 598.654700 45.016200: 605.888252
val = -5.070364 3.549200 -167.727300 1.970300: 167.876141
HI-REDUCTION      11 214.929191 6.335237
val = 9.016036 9.582200 -92.008500 -43.295300: 119.424120
val = 8.877636 11.457800 -45.193100 -22.863400: 61.811933
LO-REDUCTION      13 167.876141 6.335237
val = 27.126436 24.876200 258.293300 -9.970000: 261.473326
val = 3.083536 9.259000 -67.212800 -1.714900: 67.982501
HI-REDUCTION      15 121.340309 6.335237
val = -2.142864 9.382800 -128.572000 -9.275900: 129.928884
val = 12.575036 14.486400 56.083900 -3.099200: 59.516437
HI-REDUCTION      17 102.762253 6.335237
val = -0.734564 -8.680700 -125.634100 -24.442900: 132.861534
val = 11.146736 18.368900 40.181000 0.300700: 45.568083
HI-REDUCTION      19 67.982501 6.335237
val = 14.922936 14.911400 89.181500 -12.568700: 94.192890
val = 6.249036 10.773100 -26.546400 -4.449300: 30.318481
HI-REDUCTION      21 61.811933 6.335237
val = 4.322036 9.714100 82.116800 25.232100: 93.627930
val = 8.785736 11.857000 -15.175000 -13.003900: 30.908938
HI-REDUCTION      23 59.516437 6.335237
val = 1.616836 7.696800 -61.743000 -6.805300: 63.348159
val = 9.914536 12.847500 27.035700 -3.888100: 32.243407
HI-REDUCTION      25 45.568083 6.335237
val = 2.814836 0.706200 -50.685300 -12.186400: 54.981330
val = 9.223136 14.373600 19.087500 -2.716300: 26.041009
HI-REDUCTION      27 32.243407 6.335237
val = 3.401236 7.407100 -44.903300 -7.371300: 47.389325
val = 8.377136 11.485700 10.868900 -4.595600: 19.585436
HI-REDUCTION      29 30.908938 6.335237
val = 3.319436 7.321300 13.708200 8.116100: 21.216693
val = 5.112536 8.783400 5.096200 1.891200: 11.831623
LO-REDUCTION      31 30.318481 6.335237
val = 6.044236 7.997100 39.795800 1.360700: 41.106528
val = 6.353936 10.259800 -9.520200 -3.222500: 16.353095
HI-REDUCTION      33 26.041009 6.335237
val = 1.643336 2.193100 -16.949400 -0.385900: 17.182525
val = 3.592836 5.366600 -8.896600 -1.178400: 11.181424
LO-REDUCTION      35 19.585436 6.335237
val = -0.652264 1.533200 -18.312300 4.371600: 19.885903
val = 6.547736 9.368600 3.268300 -3.032300: 12.996531
HI-REDUCTION      37 16.353095 6.335237
val = 1.974336 2.726600 8.015200 2.156300: 9.461748
val = 3.115336 4.631800 1.965700 0.589300: 6.005388
LO-REDUCTION      39 12.996531 6.005388
val = -0.150464 0.996600 -4.673200 4.222800: 8.737893
val = 1.807236 3.455400 -2.503000 2.170400: 5.966809
LO-REDUCTION      41 11.831623 5.966809
val = 0.028736 -0.835300 -11.285700 -1.313900: 11.543161
val = 1.358436 1.684400 -7.818400 -0.661600: 8.192867
LO-REDUCTION      43 11.181424 5.966809
val = 0.241336 0.600300 2.439000 2.251100: 4.644317
val = -1.764564 -2.006200 9.027700 4.427700: 12.142960
REFLECTION        45 8.192867 4.644317
val = 2.223036 4.159800 6.773600 2.883800: 9.647611
val = 1.568836 2.329900 -5.582200 0.232200: 6.261980
HI-REDUCTION      47 6.335237 4.644317
val = 1.580936 2.763000 3.595700 3.164500: 7.287302
val = 1.910436 2.790900 -1.530600 0.353600: 3.762542
HI-REDUCTION      49 6.261980 3.762542
val = 2.061436 3.509000 3.203400 2.118900: 6.347723
val = 1.723536 2.515100 -2.967500 0.428800: 4.319024
Exiting from Nelder Mead minimizer
    51 function evaluations used
> fit
$par
[1] -4.04071794  1.92361302 -0.01291308  0.41322262

$value
[1] 3.762542

$counts
function gradient 
      51       NA 

$convergence
[1] 1

$message
NULL

> theta <- fit$par
> names(theta) <- names(mv_1)
> sim <- simulate_ergm.tapered(sim ~ edges+nodematch("x")+ kstar(2) + triangles,
+                tapering.centers=mv_1, tau=0.25/mv_1,
+                control=control.simulate.formula(MCMC.burnin=1000000, MCMC.interval=10000),
+                coef = theta)
> cbind(theta,mv_1,summary(sim ~ edges+nodematch("x")+ kstar(2) + triangles))
                  theta      mv_1     
edges       -4.04071794  381.2597  386
nodematch.x  1.92361302  341.0188  334
kstar2      -0.01291308 3092.0576 3111
triangle     0.41322262  176.2131  166
> save(sim, theta, file="sim2.RData")
> 
> proc.time()
     user    system   elapsed 
24964.335   235.069  4859.026 
