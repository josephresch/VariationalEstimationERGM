> rm(list=ls())
> my.seed=1
> set.seed(my.seed)
> 
> library(ergm.tapered)
Loading required package: ergm
Loading required package: network

‘network’ 1.18.0 (2022-10-05), part of the Statnet Project
* ‘news(package="network")’ for changes since last version
* ‘citation("network")’ for citation information
* ‘https://statnet.org’ for help, support, and other information


‘ergm’ 4.3-6983 (2022-08-20), part of the Statnet Project
* ‘news(package="ergm")’ for changes since last version
* ‘citation("ergm")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

‘ergm’ 4 is a major update that introduces some backwards-incompatible
changes. Please type ‘news(package="ergm")’ for a list of major
changes.

> library(doRNG)
Loading required package: foreach
Loading required package: rngtools
> library(mfergm)
> library(optimx)      # mfergm likelihood
> library(R.utils)     # set time on ergm
Loading required package: R.oo
Loading required package: R.methodsS3
R.methodsS3 v1.8.2 (2022-06-13 22:00:14 UTC) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.25.0 (2022-06-12 02:20:02 UTC) successfully loaded. See ?R.oo for help.

Attaching package: ‘R.oo’

The following object is masked from ‘package:R.methodsS3’:

    throw

The following objects are masked from ‘package:methods’:

    getClasses, getMethods

The following objects are masked from ‘package:base’:

    attach, detach, load, save

R.utils v2.12.1 (2022-10-30 22:12:37 UTC) successfully loaded. See ?R.utils for help.

Attaching package: ‘R.utils’

The following object is masked from ‘package:utils’:

    timestamp

The following objects are masked from ‘package:base’:

    cat, commandArgs, getOption, isOpen, nullfile, parse, warnings

> library(doParallel)  # parallel loops using 'foreach'
Loading required package: iterators
Loading required package: parallel
> 
> #####################################################################
> #                                                                   #
> #     Create High Transitivity ERGM Params (using ERGM fitting)     #
> #                                                                   #
> #####################################################################
> 
> nsims       =  1000                              # number of networks simulated
> n           =  100                               # number of nodes
> theta       =  c(-2,1,1,1) * c(2,2,1/n,1/n)      # true parameters for model 1
> theta <- c(-1.842, 1.347, -0.154, 0.853) #perfect
> theta <- c(-2.162, 1.457, -0.1314, 0.736)
> theta <- c(-2.0967979, 1.4274966, -0.1387846, 0.7541693)
> theta <- c(-2.1088249, 1.4353562, -0.1380418, 0.7504813)
> theta <- c(-2.0766314, 1.4381472, -0.1398167, 0.7496554)
> theta <- c(-1.9746393, 1.4805697, -0.1417278, 0.7249104)
> theta <- c(-2.0028533, 1.5853063, -0.1655770, 0.7367452)
> theta <- c(-1.8239798, 1.4320427, -0.1626898, 0.7308445)
> theta <- c(-1.8793576, 1.4214192, -0.1594352, 0.7495866)
> mv_1 <- c(394, 342, 3000, 180)
> mv_1 <- c(358.16, 351.24, 1.0*2643.56, 1.0*123.69)
> mv_1 <- c(400.31, 349.88, 3254.42, 1.4*126.28)
> mv_1 <- c(393.0512, 341.0188, 3092.0576, 117.4754)
> mv_1 <- c(0.97*393.0512, 341.0188, 3092.0576, 1.5*117.4754)
> ##################
> #                #
> #     Set-up     #
> #                #
> ##################
> 
> sim <- initialize.network(theta, n, directed = FALSE)
> x <- rbinom(n, 1, 0.5) # attributes
> set.vertex.attribute(sim, # the name of the network object
+                      "x", # the name we want to reference the variable by in that object
+                      x # the value we are giving that variable
+ ) 
> 
> # load(file="sim2.RData")
> formula <- sim ~ edges + nodematch("x") + kstar(2) + triangles
> names(mv_1) <- names(summary(formula))
> names(theta) <- names(mv_1)
> 
> 
> 
> ####### 1. This step several, several times for sim
> if(F){
+ fit <- ergm.tapered(formula, eval.loglik=FALSE, target.stats=mv_1,
+                     control=control.ergm.tapered(parallel=4,init=theta, MCMLE.MCMC.precision=0.001,MCMC.burnin=1000000, MCMC.interval=10000) )
+ sim <- fit$newnetwork
+ save(sim, file="sim2.RData")
+ }else{
+   
+ ####### 3. Check how good sim and theta are
+ # load(file="sim2.RData")
+ # theta <- c(-4.04102369, 1.92622055, -0.01309495, 0.40731208)
+ sim <- simulate_ergm.tapered(sim ~ edges+nodematch("x")+ kstar(2) + triangles,
+                tapering.centers=mv_1, tau=0.25/mv_1,
+                # control=control.simulate.formula(MCMC.burnin=1000000, MCMC.interval=10000),
+                coef = theta)
+ }
> cbind(theta,mv_1,summary(sim ~ edges+nodematch("x")+ kstar(2) + triangles))
                 theta      mv_1     
edges       -1.8793576  381.2597  401
nodematch.x  1.4214192  341.0188  346
kstar2      -0.1594352 3092.0576 3096
triangle     0.7495866  176.2131  200
> # pdf("sim.pdf")
> plot(sim ,vertex.col=c(1,3)[(sim %v% "x")+1])
> # dev.off()
> 
> 
> ###### 2. Optim this function for theta
> registerDoParallel(10)
> fn <- function(theta,sim,mv_1,nsims){
+   a = foreach(i = 1:10, .combine = rbind) %dorng% {
+   simulate_ergm.tapered(sim ~ edges+nodematch("x")+ kstar(2) + triangles,
+                tapering.centers=mv_1, tau=0.25/mv_1,
+                nsim = nsims,
+                # control=control.simulate.formula(MCMC.burnin=1000000, MCMC.interval=100000),
+                coef = theta,         
+                output = "stats"
+   )
+   }
+ o <- colMeans(a)-mv_1
+ # o2 <- c(3,3,0.5,1)*o*o
+ o2 <- o*o
+ # o2 <- c(1,1,1,3)*o*o
+ message(sprintf("val = %f %f %f %f: %f", o[1],o[2],o[3],o[4], sqrt(sum(o2))))
+ sqrt(sum(o2))
+ }
> theta
      edges nodematch.x      kstar2    triangle 
 -1.8793576   1.4214192  -0.1594352   0.7495866 
> fn(theta,sim,mv_1,nsims)
val = 13.951136 0.382200 -98.796200 0.216000: 99.777332
[1] 99.77733
> fit <- optim(par=theta, fn=fn, sim=sim, mv_1=mv_1, nsims=nsims, control=list(maxit=50,abstol=2,trace=6))
  Nelder-Mead direct search function minimizer
val = 13.843336 0.137200 -100.204400 0.153100: 101.156325
function value for initial parameters = 101.156325
  Scaled convergence tolerance is 1.50735e-06
Stepsize computed as 0.187936
val = 18.458636 3.587700 -42.776800 2.596000: 46.799430
val = 17.555736 12.521800 -53.647700 8.083500: 58.381658
val = 69.346336 41.801600 844.622900 54.676100: 850.255025
val = 15.976636 8.207700 -39.797200 31.864700: 54.053635
BUILD              5 850.255025 46.799430
val = -38.867764 -37.261200 -886.809700 -39.814400: 889.334431
val = 43.361636 25.279100 384.999900 33.002400: 389.657986
HI-REDUCTION       7 389.657986 46.799430
val = -10.838564 -14.603500 -484.521500 -14.829200: 485.089400
val = 30.124136 15.970700 162.278900 21.516700: 167.212250
HI-REDUCTION       9 167.212250 46.799430
val = 2.907936 -4.130700 -274.991200 -2.666800: 275.050524
val = 23.254736 11.154800 50.060700 15.623500: 58.441250
HI-REDUCTION      11 101.156325 46.799430
val = 23.807336 17.838600 54.510700 27.951800: 68.100840
val = 21.341536 13.444600 15.946900 20.841200: 36.398869
LO-REDUCTION      13 58.441250 36.398869
val = 13.664336 7.945700 -108.269100 14.371900: 110.356684
val = 20.827436 10.472600 9.690000 15.701800: 29.730457
HI-REDUCTION      15 58.381658 29.730457
val = 20.730536 4.677100 24.079600 26.815100: 41.839062
val = 20.197136 7.163600 7.086100 21.422700: 31.118907
LO-REDUCTION      17 54.053635 29.730457
val = 24.224236 8.687400 37.814400 1.190900: 45.756219
val = 22.181936 8.765800 16.797500 7.998400: 30.249098
LO-REDUCTION      19 46.799430 29.730457
val = 23.549236 16.037800 65.778400 31.337000: 78.234155
val = 19.843136 6.709600 -15.697500 9.155200: 27.730813
HI-REDUCTION      21 36.398869 27.730813
val = 20.210236 2.882100 -7.592700 6.182300: 22.641335
val = 19.595336 -3.079400 -19.207600 -1.352100: 27.644529
REFLECTION        23 31.118907 22.641335
val = 21.422836 7.619700 -2.284400 -0.966100: 22.872463
val = 21.080336 7.367000 -0.993900 4.206600: 22.745034
LO-REDUCTION      25 30.249098 22.641335
val = 18.715736 4.981100 -24.367100 9.595600: 32.571786
val = 21.292736 7.838700 5.554200 8.101100: 24.724538
HI-REDUCTION      27 29.730457 22.641335
val = 20.236936 1.848300 -19.551300 -1.428500: 28.235505
val = 20.432036 3.935600 -11.867600 2.787600: 24.115715
LO-REDUCTION      29 27.730813 22.641335
val = 21.629136 4.146800 7.044600 1.459600: 23.168347
val = 21.265436 4.910700 2.872000 3.386600: 22.272207
LO-REDUCTION      31 24.724538 22.272207
val = 20.200236 1.650300 -14.875700 -0.517000: 25.146108
val = 21.050436 6.107800 1.172000 6.086400: 22.778146
HI-REDUCTION      33 24.115715 22.272207
val = 21.270536 6.548200 8.834300 6.914800: 24.923361
val = 20.616236 4.744500 -7.425700 3.846300: 22.748066
HI-REDUCTION      35 22.778146 22.272207
val = 20.582936 3.579400 -7.488700 2.344700: 22.316980
val = 20.659936 4.241600 -5.921000 3.546900: 22.191504
LO-REDUCTION      37 22.748066 22.191504
val = 21.007236 4.965800 1.634600 4.586600: 22.128533
val = 21.049536 5.159300 3.582800 5.073400: 22.545004
REFLECTION        39 22.745034 22.128533
val = 20.487036 1.064600 -3.440900 4.549300: 21.292908
val = 20.171836 -2.544000 -4.836700 4.377500: 21.352543
REFLECTION        41 22.641335 21.292908
val = 21.388936 4.728600 4.122200 2.100500: 22.388633
val = 21.143036 4.209500 0.845100 2.661900: 21.738164
LO-REDUCTION      43 22.272207 21.292908
val = 20.273836 2.363200 -7.040100 4.281200: 22.011470
val = 20.561836 3.006800 -4.659900 3.894300: 21.649716
LO-REDUCTION      45 22.191504 21.292908
val = 20.862036 2.232400 2.078800 4.615200: 21.583087
val = 20.749136 2.883300 0.093800 4.587700: 21.445183
LO-REDUCTION      47 22.128533 21.292908
val = 20.449436 0.387000 -4.935500 3.165500: 21.276954
val = 20.409036 -1.713500 -5.795600 2.500700: 21.431456
REFLECTION        49 21.738164 21.276954
val = 20.027136 -0.613600 -7.523500 5.078300: 21.996701
val = 20.923536 3.147500 -0.366300 3.444300: 21.440581
Exiting from Nelder Mead minimizer
    51 function evaluations used
> fit
$par
      edges nodematch.x      kstar2    triangle 
 -1.6922489   1.3343564  -0.1478219   0.7595599 

$value
[1] 21.27695

$counts
function gradient 
      51       NA 

$convergence
[1] 1

$message
NULL

> theta <- fit$par
> names(theta) <- names(mv_1)
> sim <- simulate_ergm.tapered(sim ~ edges+nodematch("x")+ kstar(2) + triangles,
+                tapering.centers=mv_1, tau=0.25/mv_1,
+                control=control.simulate.formula(MCMC.burnin=1000000, MCMC.interval=10000),
+                coef = theta)
> cbind(theta,mv_1,summary(sim ~ edges+nodematch("x")+ kstar(2) + triangles))
                 theta      mv_1     
edges       -1.6922489  381.2597  406
nodematch.x  1.3343564  341.0188  354
kstar2      -0.1478219 3092.0576 3150
triangle     0.7595599  176.2131  188
> save(sim, theta, file="sim2.RData")
> 
> proc.time()
   user  system elapsed 
432.294  23.510  56.087 
