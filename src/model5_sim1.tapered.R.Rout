> rm(list=ls())
> my.seed=5
> set.seed(my.seed)
> 
> pdf("model5_sim1.tapered.pdf")
> 
> library(ergm.tapered)
Loading required package: ergm
Loading required package: network

‘network’ 1.18.0 (2022-10-05), part of the Statnet Project
* ‘news(package="network")’ for changes since last version
* ‘citation("network")’ for citation information
* ‘https://statnet.org’ for help, support, and other information


‘ergm’ 4.3-6983 (2022-08-20), part of the Statnet Project
* ‘news(package="ergm")’ for changes since last version
* ‘citation("ergm")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

‘ergm’ 4 is a major update that introduces some backwards-incompatible
changes. Please type ‘news(package="ergm")’ for a list of major
changes.

> library(mfergm)
> library(optimx)     # mfergm likelihood
> library(R.utils)    # set time on ergm
Loading required package: R.oo
Loading required package: R.methodsS3
R.methodsS3 v1.8.2 (2022-06-13 22:00:14 UTC) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.25.0 (2022-06-12 02:20:02 UTC) successfully loaded. See ?R.oo for help.

Attaching package: ‘R.oo’

The following object is masked from ‘package:R.methodsS3’:

    throw

The following objects are masked from ‘package:methods’:

    getClasses, getMethods

The following objects are masked from ‘package:base’:

    attach, detach, load, save

R.utils v2.12.0 (2022-06-28 03:20:05 UTC) successfully loaded. See ?R.utils for help.

Attaching package: ‘R.utils’

The following object is masked from ‘package:utils’:

    timestamp

The following objects are masked from ‘package:base’:

    cat, commandArgs, getOption, isOpen, nullfile, parse, warnings

> library(doParallel) # parallel loops using 'foreach'
Loading required package: foreach
Loading required package: iterators
Loading required package: parallel
> 
> #####################################################################
> #                                                                   #
> #     Create High Transitivity ERGM Params (using ERGM fitting)     #
> #                                                                   #
> #####################################################################
> 
> nsims       =  1000                              # number of networks simulated
> n           =  100                                # number of nodes
> #theta       =  c(-3,2,1,3) * c(2,2,1/n,1/n)      # true parameters for model 2
> theta       =  c(-2,1,1,1) * c(2,2,1/n,1/n)      # true parameters for model 1
> 
> 
> ##################
> #                #
> #     Set-up     #
> #                #
> ##################
> 
> g <- initialize.network(theta, n, directed = FALSE)
> x <- rbinom(n, 1, 0.5) # attributes
> set.vertex.attribute(g, # the name of the network object
+                      "x", # the name we want to reference the variable by in that object
+                      x # the value we are giving that variable
+ ) 
> 
> # Simulated networks 'g_sim' used for both ERGM and MFERGM
> g_sim <- simulate(g ~ edges + nodematch("x") + kstar(2) + triangles, 
+                   nsim = 10*nsims,
+                   output = "stats",
+                   coef = theta
+ )
> formula <- g ~ edges + nodematch("x") + kstar(2) + triangles
> mv_1 <- colMeans(g_sim)
> mv_i <- mv_1
> #mv_i[3] <- 1.0*mv_i[3]
> mv_i[3] <- 1.05*mv_1[3]
> mv_i[4] <- 1.33*mv_1[4]
> mv_i[3] <- 1.10*mv_1[3]
> mv_i[4] <- 1.5*mv_1[4]
> mv_i[3] <- 1.25*mv_1[3]
> mv_i[4] <- 2.0*mv_1[4]
> mv_i[3] <- 1.25*mv_1[3]
> mv_i[4] <- 3.0*mv_1[4]
> #
> mv_i[3] <- 1.25*mv_1[3]
> mv_i[4] <- 4.0*mv_1[4]
> #names(mv_i) <- names(summary(formula))
> cbind(mv_1, mv_i)
                 mv_1      mv_i
edges        394.2473  394.2473
nodematch.x  342.4246  342.4246
kstar2      3120.7968 3900.9960
triangle     119.0471  476.1884
> #fit <- ergm.tapered(formula, eval.loglik=FALSE,# target.stats=mv_i,
> #                    control=control.ergm.tapered(MCMC.burnin=100000, MCMC.interval=10000) )
> #summary(fit)
> fit <- ergm.tapered(formula, eval.loglik=FALSE, target.stats=mv_i,
+                     control=control.ergm.tapered(MCMLE.MCMC.precision=0.001,MCMC.burnin=1000000, MCMC.interval=10000) )
Starting maximum pseudolikelihood estimation (MPLE):
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stopping at the initial estimate.
