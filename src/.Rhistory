env$.taper.center <- target.stats.aug
env$.taper.coef <- c(tau,0)
environment(newformula) <- env
nw <- san(newformula,target.stats=target.stats.aug,control=control.san(SAN.maxit=100))
target.stats.aug <- c(target.stats,NA)
names(target.stats.aug) <- re.names
names(target.stats) <- re.names[1:length(target.stats)]
env$.taper.center <- target.stats
env$.taper.coef <- tau
environment(newformula) <- env
nw <- san(newformula,target.stats=target.stats,control=control.san(SAN.maxit=100))
newformula
Q
q()
source("model4_sim1.tapered.R",echo=T)
traceback()
q()
source("model4_sim1.tapered.R",echo=T)
names(netsumm)
target.stats
cbind(names(netsumm),target.stats)
summary(model,nw)
offset.indicators
traceback()
f
traceback()
q()
source("model4_sim1.tapered.R",echo=T)
f
fit$newnetwork
sumamry(fit$newnetwork ~edges + triangles)
summary(fit$newnetwork ~edges + triangles)
mv_i
source("model4_sim1.tapered.R",echo=T)
summary(nw ~edges + triangles)
target.stats
tau
1/tau
0.5/tau
0.25/tau
mv_i
nw <- san(newformula,target.stats=target.stats,control=control.san(SAN.maxit=100))
summary(nw ~edges + triangles)
Q
q()
source("model4_sim1.tapered.R",echo=T)
summary(nw ~edges + triangles)
f
q()
quartz()
ls()
load(("mfergm_params2_n1000.RData"))
ls()
plot(MPLE_result[,4],ergm_result_tapered[,4])
str(ergm_result_tapered)
str(ergm_sim_estim_tapered)
plot(MPLE_result[,4],ergm_sim_estim_tapered[,4])
dtr(MPLE_result)
dir(init_params)
str(init_params)
plot(init_params[,4],ergm_sim_estim_tapered[,4])
cor(init_params[,4],ergm_sim_estim_tapered[,4])
abline(n=theta[,4])
abline(v=theta[,4])
abline(v=theta[4])
abline(h=theta[4])
mean(abs(init_params[,4]-theta[4]))
mean(abs(ergm_sim_estim_tapered[,4]-theta[4]))
mean(abs(ergm_sim_estim_tapered[,3]-theta[3]))
mean(abs(init_params[,3]-theta[3]))
q()
load(("mfergm_params2_n1000.RData"))
quartz()
mean(abs(init_params[,3]-theta[3]))
mean(abs(ergm_sim_estim_tapered[,3]-theta[3]))
mean(abs(ergm_sim_estim_tapered[,4]-theta[4]))
mean(abs(init_params[,4]-theta[4]))
plot(init_params[,4],ergm_sim_estim_tapered[,4])
plot(mf_estim[,4],ergm_sim_estim_tapered[,4])
ls()
plot(mfergm_estim[,4],ergm_sim_estim_tapered[,4])
plot(mfergm_estim[,4],ergm_sim_estim_tapered[,4],xlim=c(-1,1))
q()
source("model6_sim1.tapered.R")
newformula
summary(newformula)
estimate
f
estimate
summary(newformula)
target.stats
fit <- ergm(newformula, control=control,
response=response, constraints=constraints, reference=reference, estimate=estimate,
eval.loglik=eval.loglik, verbose=verbose, ...)
sumamry(fit)
summary(fit)
f
traceback()
q()
source("model6_sim1.tapered.R",echo=T)
q()
source("model6_sim1.tapered.R",echo=T)
Q
q()
source("model6_sim1.tapered.R",echo=T)
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
control$init
re.names
n
n
Q
q()
source("model6_sim1.tapered.R",echo=T)
str(g_sim)
length(g_sim)
length(g_sim[[1]])
length(g_sim[[1]][[1]])
class(g_sim[[1]][[1]])
a <- NULL
for(i in 1:10){
a <- c(a, g_sim[[i]])
}
length(a)
n
n
n
n
n
n
n
n
n
n
n
length(a)
class(a[[999]])
a <- g_sim
g_sim <- NULL
for(i in 1:10){
g_sim <- c(g_sim, a[[i]])
}
n
n
n
n
n
n
n
n
n
n
n
n
n
n
Q
q()
devtools::install_github("meleangelo/mfergm")
q()
source("aaa.R",echo=T)
quartz()
outliers1
outliers2
length(outliers2)
length(outliers1)
length(outliers3)
length(outliers4)
length(outliers5)
outliers
n
n
n
n
n
n
nrow(complete_tapered_results)
outliers_all
Q
source("aaa.R",echo=T)
length(outliers_all)
(outliers_all)
outliers1
length(outliers1)
length(outliers2)
f
f
f
f
length(outliers1)
outliers1
plot(density(complete_mf_results[,1] - mv_s[1]))
plot(density((complete_mf_results[,1] - mv_s[1])[-outliers1]))
(complete_mf_results[,1] - mv_s[1])[-outliers1]
(complete_mf_results[,1] - mv_s[1])
dim(complete_mf_results)
dim(mfergm_estim)
complete.cases(mfergm_estim)
complete_mf_results = mfergm_estim[complete.cases(mfergm_estim),]
dim(complete_mf_results)
plot(density((complete_mf_results[,1] - mv_s[1])[-outliers1]))
(complete_mf_results[,1] - mv_s[1])[-outliers1]
outliers1
outliers1 = outliers((complete_mf_results[,1] - theta[1])^2)
outliers1
length(outliers1)
(complete_mf_results[,1] - mv_s[1])[-outliers1]
complete_mf_results[,1]
mfergm_estim
outliers1 = outliers((complete_mf_results[,1] - theta[1])^2)
outloers1
outliers1
(complete_mf_results[,1] - theta[1])[-outliers1]
plot(density((complete_mf_results[,1] - theta[1])[-outliers1]))
plot(density((complete_mf_results[,1] - theta[1])[-outliers1]),xlim=c(-10,10))
quartz()
plot(density((complete_mf_results[,1] - theta[1])[-outliers1]),xlim=c(-10,10))
plot(density((complete_mf_results[,1] - theta[1])[-outliers1]))
lines(density((complete_tapered_results[,1] - theta[1])[-outliers1]),col=3)
complete_tapered_results
Q
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
source("aaa.R",echo=T)
quartz()
outliers1
plot(density(((complete_MPLE_results[,1] - theta[1]))[-outliers1]))
n
plot(density(((complete_mf_results[,1] - theta[1]))[-outliers1]))
plot(density(((complete_mf_results[,1] - theta[1]))))
plot(density(((complete_tapered_results[,1] - theta[1]))[-outliers1]))
plot(x=(complete_mf_results[,1] - theta[1]))[-outliers1],y=(complete_tapered_results[,1] - theta[1]))[-outliers1])
plot(x=(complete_mf_results[,1] - theta[1])[-outliers1],y=(complete_tapered_results[,1] - theta[1])[-outliers1])
abline(h=0)
abline(v=0)
outliers1 = outliers((complete_tapered_results[,1] - theta[1])^2)
outliers1
plot(x=(complete_mf_results[,1] - theta[1])[-outliers1],y=(complete_tapered_results[,1] - theta[1])[-outliers1])
sort((complete_tapered_results[,1] - theta[1])^2)[-outliers1])
sort(complete_tapered_results[,1] - theta[1])^2)[-outliers1])
sort(((complete_tapered_results[,1] - theta[1])^2)[-outliers1])
max(((complete_tapered_results[,1] - theta[1])^2)[-outliers1])
goog <- (complete_tapered_results[,1] - theta[1])^2)[-outliers1]
good <- ((complete_tapered_results[,1] - theta[1])^2)[-outliers1]
rmse <- ((complete_tapered_results[,1] - theta[1])^2)
rmse[outliers1] <- max(good)
tapered_rmse1 = sqrt(sum(rmse))
tapered_rmse1
Q
q()
load("mfergm_params9_n100.RData")
ls()
union
object.size(a)
?object.size
print(object.size(a),units = "Mb")
print(object.size(g_sim_stats),units = "Mb")
sapply(ls(),function(x){print(object.size(x),units = "Mb")})
f <- ls()
str(f)
sapply(list(ls()),function(x){print(object.size(x),units = "Mb")})
for(i in 1:length(ls()){
for(i in 1:length(ls())){
print(object.size(ls()[i]),units = "Mb")
}
for(i in 1:length(ls())){
print(object.size(get(f[i])),units = "Mb")
}
for(i in 1:length(ls())){
print(c(f[i],object.size(get(f[i])),units = "Mb"))}
object.size(MPLE_mv_est)
print(object.size(MPLE_mv_est),units="Mb")
print(object.size(ergm_sim_list_tapered),units="Mb")
print(object.size(g_sim),units="Mb")
print(object.size(g_sim[1:nsim]),units="Mb")
print(object.size(g_sim[1:nsims]),units="Mb")
q()
load("mfergm_params10_n1000.RData")
print(object.size(g_sim),units="Mb")
length(g_sim)
class(g_sim[[1]])
q()
load("mfergm_params10_n1000_6.RData")
ls()
print(object.size(g_sim),units="Mb")
print(object.size(ergm_sim_list_tapered),units="Mb")
print(object.size(mfergm_result),units="Mb")
print(object.size(mfergm_estim),units="Mb")
print(object.size(ergm_sim_estim_tapered),units="Mb")
q()
devtools::install_github("statnet/ergm.tapered", ref="tapered")
devtools::install_github("statnet/ergm", ref="tapered")
q()
load(file="g_sim_stats.RData")
ls()
q()
load(file="g_sim_stats.RData")
ls()
str(g_sim_stats)
apply(g_sim_stats,2,median)
head(g_sim_stats)
100*99/2
q()
library(ergm.tapered)
simulate_ergm.tapered
.libPaths()
q()
install.packages("devtools")
devtools::install_github("statnet/ergm", ref="tapered")
q()
install.packages("numDeriv")
q()
install.packages("doRNG")
install.packages("optimx")
install.packages("R.utils")
install.packages("doParallel")
q()
q()
source("fixedpoint2_JR.R",echo=T)
n
n
n
tau
n
newformula
formula
offset.coef
Q
q()
source("fixedpoint2_JR.R",echo=T)
f
f
q()
source("fixedpoint2_JR.R",echo=T)
f
q()
source("fixedpoint2_JR.R",echo=T)
newformula
summary(newformula)
fit <- ergm(newformula, control=control, offset.coef=tau,
response=response, constraints=constraints, reference=reference, eval.loglik=eval.loglik, verbose=verbose, ...)
fit <- ergm(newformula, control=control,
response=response, constraints=constraints, reference=reference, eval.loglik=eval.loglik, verbose=verbose, ...)
Q
q()
source("fixedpoint2_JR.R",echo=T)
n
n
n
control[["SAN.exclude.statistics"]]
names(nw.stats)
n
n
n
n
nw.stats
n
n
n
n
f
q()
source("fixedpoint2_JR.R",echo=T)
f
traceback()
q()
source("fixedpoint2_JR.R",echo=T)
n
SAN.exclude.statistics
control$SAN.exclude.statistics
n
n
x.exclude
n
n
target.stats
names(netsumm)
n
n
f
names(netsumm)
control$SAN.exclude.statistics
n
n
n
n
n
vector.namesmatch(target.stats, names(netsumm))
n
f
f
control$SAN.exclude.statistics
control$SAN.exclude.statistics <- "Taper_Penalty"
control$SAN.exclude.statistics
n
q()
source("fixedpoint2_JR.R",echo=T)
f
f
fit <- ergm(newformula, control=control, target.stats=tostats, #offset.coef=tau,
response=response, constraints=constraints, reference=reference, eval.loglik=eval.loglik, verbose=verbose, ...)
control$SAN.exclude.statistics
control
Q
q()
source("fixedpoint2_JR.R",echo=T)
f
f
f
source("fixedpoint2_JR.R",echo=T)
f
f
control$SAN
fit <- ergm(newformula, control=control, target.stats=tostats, #offset.coef=tau,
response=response, constraints=constraints, reference=reference, eval.loglik=eval.loglik, verbose=verbose, ...)
traceback()
Q
q()
source("fixedpoint2_JR.R",echo=T)
f
f
f
q()
source("fixedpoint2_JR.R",echo=T)
f
f
traceback()
q()
source("fixedpoint2_JR.R",echo=T)
f
f
.align.target.stats.offset(model, target.stats)
target.stats
.align.target.stats.offset
model$etamap$offsetmap
model$etamap$offsetmap[5] <- TRUE
.align.target.stats.offset(model, target.stats)
model$etamap$offsetmap[5] <- FALSE
.align.target.stats.offset(model, target.stats)
debug(.align.target.stats.offset)
.align.target.stats.offset(model, target.stats)
n
n
n
n
vector.namesmatch(target.stats, cn)
target.stats
cn
param_names(model, canonical = TRUE)
f
model$etamap$offsetmap[5] <- TRUE
.align.target.stats.offset(model, target.stats)
n
n
n
n
cn
vector.namesmatch(target.stats, cn)
n
n
n
n
Q
q()
source("fixedpoint2_JR.R",echo=T)
f
f
q()
source("fixedpoint2_JR.R",echo=T)
f
q()
